service: aws-cost-analysis

plugins:
  - serverless-step-functions

provider:
  name: aws
  runtime: python2.7


# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
#  include:
#    - include-me.py
#    - include-me-dir/**
  exclude:
    - cloudformation/**
    - config/**
    - scripts/**
    - '**/**/*.dist-info/**'
    - '**/**/__pycache__/**'
    - '**/**/*.pyc'

functions:
  xAcctStepFunctionStarter:
    handler: functions/xacct-step-function-starter.handler

  S3EventStepFunctionStarter:
    handler: functions/s3event-step-function-starter.handler

  ProcessCostUsageFunction:
    handler: functions/functions/process-cur.handler

  CreateAthenaResourcesFunction:
    handler: functions/create-athena-resources.handler

  InitializeAthenaQueriesFunction:
    handler: functions/init-athena-queries.handler

  UpdateMetadataFunction:
    handler: functions/update-metadata.handler

stepFunctions:
  stateMachines:
    build-for-commit:


#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
